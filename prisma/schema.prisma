// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum StoreType {
  Business
  Person
}

enum OrderStatus {
  Open
  In_Route
  Delivered
  Canceled
  Partial_In_Route
  Partial_Delivered
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  storeReviews  StoreReview[]
  orders        Order[]
  products      Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id                String    @id @default(cuid())
  url               String
  name              String
  photo             String?
  hasStock          Boolean?
  receiveOrders     Boolean?
  facebook          String?
  instagram         String?
  whatsapp          String?
  website           String?
  countryId         String
  type              StoreType
  country           Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  productsCountry   Store_ProductsCountry[]
  customProperties  StoreCustomProperties[]
  productTypes      Store_ProductType[]
  addresses         StoreAddress[]
  storeReviews      StoreReview[]
  orders            Order[]
  deliveries        Delivery[]

  @@index([countryId])
}

model Store_ProductsCountry {
  idStore           String
  store             Store @relation(fields: [idStore], references: [id])
  idProductsCountry String
  country           ProductsCountry @relation(fields: [idProductsCountry], references: [id])

  @@id([idStore, idProductsCountry])
  @@index([idStore])
  @@index([idProductsCountry])
}

model ProductsCountry {
  id     String  @id @default(cuid())
  name   String  @unique
  stores Store_ProductsCountry[]
}

model StoreCustomProperties {
  id       String  @id @default(cuid())
  storeId  String
  store    Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  property String
  value    String

  @@unique([storeId, property])
}

model Store_ProductType {
  idStore           String
  store             Store @relation(fields: [idStore], references: [id])
  idProductType     String
  productType       ProductType @relation(fields: [idProductType], references: [id])

  @@id([idStore, idProductType])
  @@index([idStore])
  @@index([idProductType])
}

model ProductType {
  id     String  @id @default(cuid())
  name   String  @unique
  stores Store_ProductType[]
}

model Country {
  id     String  @id @default(cuid())
  name   String  @unique
  stores Store[]
}

model StoreAddress {
  id       String  @id @default(cuid())
  storeId  String
  store    Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  address  String
  city     String
  district String

  @@index([storeId])
}

model StoreReview {
  id      String  @id @default(cuid())
  storeId String
  store   Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  userId  String
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating  Int
  comment String
  orderId String? @unique
  order   Order? @relation(fields: [orderId], references: [id])

  @@index([storeId])
  @@index([userId])
}

model Order {
  id            String  @id @default(cuid())
  storeId       String
  store         Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderDate     DateTime
  deliveryDate  DateTime?
  productsCost  Float
  delivered     Boolean @default(false)
  createdDate   DateTime @default(now())
  currencyId    String
  currency      Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  status        OrderStatus @default(Open)
  minApproximateDeliveryDate DateTime?
  maxApproximateDeliveryDate DateTime?
  review        StoreReview?
  products      OrderProduct[]
  orderNotes    OrderNote[]
  orderPayments OrderPayment[]

  @@index([storeId])
  @@index([userId])
  @@index([currencyId])
}

model OrderProduct {
  id           String  @id @default(cuid())
  orderId      String
  order        Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productName  String
  price        Float?
  deliveryId   String?
  delivery     Delivery? @relation(fields: [deliveryId], references: [id])
  product      Product?

  @@index([orderId])
  @@index([deliveryId])
}

model OrderNote {
  id          String  @id @default(cuid())
  note        String
  orderId     String
  createdDate DateTime @default(now())
  order       Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model OrderPayment {
  id           String  @id @default(cuid())
  orderId      String
  order        Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentDate  DateTime
  amount       Float

  @@index([orderId])
}

model Delivery {
  id                          String  @id @default(cuid())
  currencyId                  String
  currency                    Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  price                       Float
  delivered                   Boolean @default(false)
  deliveryDate                DateTime?
  minApproximateDeliveryDate  DateTime?
  maxApproximateDeliveryDate  DateTime?
  currier                     String?
  tracking                    String?
  storeId                     String
  store                       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderProducts               OrderProduct[]

  @@index([currencyId])
  @@index([storeId])
}

model Product {
  id  String  @id @default(cuid())
  name String
  orderProductId String? @unique
  order OrderProduct? @relation(fields: [orderProductId], references: [id])
  price Float
  imageUrl String?
  acquisitionDate DateTime?
  userId String
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Currency {
  id          String  @id @default(cuid())
  name        String  @unique
  orders      Order[]
  deliveries  Delivery[]
}
